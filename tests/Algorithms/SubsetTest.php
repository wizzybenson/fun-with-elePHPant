<?php


namespace FunwithelePHPant\Algorithms;


use PHPUnit\Framework\TestCase;

class SubsetTest extends TestCase
{
    /**
     * @param array $arr
     * @param array $subsets
     * @dataProvider subsetsProvider
     */
    public function test_given_array_return_all_subsets(array $arr, array $subsets)
    {
        $subset = new Subset();
        $result = $subset->allSubset($arr);
        $subsets = array_flip(array_map('implode', $subsets));
        $correct = true;
        foreach ($result as $value) {
            if (!isset($subsets[implode($value)]))
            {
                $correct = false;
                break;
            };
        }
        $this->assertTrue($correct && count($subsets) == count($result));
    }

    public function subsetsProvider()
    {
        return [
            [
                [1,2,3,4,5,6,7],
                [
                    [1], [2], [3], [4], [5], [6], [7],
                    [1, 2], [1, 3], [2, 3], [1, 4], [2, 4], [3, 4], [1, 5], [2, 5], [3, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7],
                    [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4], [1, 2, 5], [1, 3, 5], [2, 3, 5], [1, 4, 5], [2, 4, 5], [3, 4, 5], [1, 2, 6], [1, 3, 6], [2, 3, 6], [1, 4, 6], [2, 4, 6], [3, 4, 6], [1, 5, 6], [2, 5, 6], [3, 5, 6], [4, 5, 6], [1, 2, 7], [1, 3, 7], [2, 3, 7], [1, 4, 7], [2, 4, 7], [3, 4, 7], [1, 5, 7], [2, 5, 7], [3, 5, 7], [4, 5, 7], [1, 6, 7], [2, 6, 7], [3, 6, 7], [4, 6, 7], [5, 6, 7],
                    [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5], [1, 2, 3, 6], [1, 2, 4, 6], [1, 3, 4, 6], [2, 3, 4, 6], [1, 2, 5, 6], [1, 3, 5, 6], [2, 3, 5, 6], [1, 4, 5, 6], [2, 4, 5, 6], [3, 4, 5, 6], [1, 2, 3, 7], [1, 2, 4, 7], [1, 3, 4, 7], [2, 3, 4, 7], [1, 2, 5, 7], [1, 3, 5, 7], [2, 3, 5, 7], [1, 4, 5, 7], [2, 4, 5, 7], [3, 4, 5, 7], [1, 2, 6, 7], [1, 3, 6, 7], [2, 3, 6, 7], [1, 4, 6, 7], [2, 4, 6, 7], [3, 4, 6, 7], [1, 5, 6, 7], [2, 5, 6, 7], [3, 5, 6, 7], [4, 5, 6, 7],
                    [1, 2, 3, 4, 5], [1, 2, 3, 4, 6], [1, 2, 3, 5, 6], [1, 2, 4, 5, 6], [1, 3, 4, 5, 6], [2, 3, 4, 5, 6], [1, 2, 3, 4, 7], [1, 2, 3, 5, 7], [1, 2, 4, 5, 7], [1, 3, 4, 5, 7], [2, 3, 4, 5, 7], [1, 2, 3, 6, 7], [1, 2, 4, 6, 7], [1, 3, 4, 6, 7], [2, 3, 4, 6, 7], [1, 2, 5, 6, 7], [1, 3, 5, 6, 7], [2, 3, 5, 6, 7], [1, 4, 5, 6, 7], [2, 4, 5, 6, 7], [3, 4, 5, 6, 7],
                    [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 7], [1, 2, 3, 4, 6, 7], [1, 2, 3, 5, 6, 7], [1, 2, 4, 5, 6, 7], [1, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7],
                    [1, 2, 3, 4, 5, 6, 7]
                ],
            ],
            [   [1,2,3],
                [
                    [1],
                    [1, 2],
                    [1, 2, 3],
                    [1, 3],
                    [2],
                    [2 ,3],
                    [3]
                ]

            ]
        ];
    }

}